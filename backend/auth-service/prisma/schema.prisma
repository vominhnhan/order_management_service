generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model categories {
  id         Int        @id @default(autoincrement())
  name       String     @unique(map: "name") @db.VarChar(100)
  created_at DateTime?  @default(now()) @db.DateTime(0)
  updated_at DateTime?  @default(now()) @db.DateTime(0)
  products   products[]
}

model order_details {
  id         Int                   @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity   Int
  notes      String?               @db.VarChar(255)
  status     order_details_status? @default(PREPARING)
  created_at DateTime?             @default(now()) @db.DateTime(0)
  updated_at DateTime?             @default(now()) @db.DateTime(0)
  orders     orders                @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_details_ibfk_1")
  products   products              @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "order_details_ibfk_2")

  @@index([order_id], map: "order_id")
  @@index([product_id], map: "product_id")
}

model orders {
  id            Int             @id @default(autoincrement())
  table_id      Int
  status        orders_status?  @default(PENDING)
  total_price   Decimal?        @default(0.00) @db.Decimal(10, 2)
  code          String          @db.VarChar(4)
  created_at    DateTime?       @default(now()) @db.DateTime(0)
  updated_at    DateTime?       @default(now()) @db.DateTime(0)
  order_details order_details[]
  tables        tables          @relation(fields: [table_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "orders_ibfk_1")
  payments      payments[]

  @@index([table_id], map: "table_id")
}

model payments {
  id                Int       @id @default(autoincrement())
  order_id          Int
  final_total_price Decimal   @db.Decimal(10, 2)
  payment_time      DateTime? @default(now()) @db.DateTime(0)
  orders            orders    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "payments_ibfk_1")

  @@index([order_id], map: "order_id")
}

model products {
  id            Int             @id @default(autoincrement())
  name          String          @db.VarChar(100)
  description   String?         @db.VarChar(255)
  price         Decimal         @db.Decimal(10, 2)
  is_available  Boolean?        @default(true)
  category_id   Int
  created_at    DateTime?       @default(now()) @db.DateTime(0)
  updated_at    DateTime?       @default(now()) @db.DateTime(0)
  order_details order_details[]
  categories    categories      @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "products_ibfk_1")

  @@index([category_id], map: "category_id")
}

model roles {
  id          Int       @id @default(autoincrement())
  name        String    @unique(map: "name") @db.VarChar(50)
  description String    @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.DateTime(0)
  updated_at  DateTime? @default(now()) @db.DateTime(0)
  users       users[]
}

model secret_code {
  id         Int       @id @default(autoincrement())
  code       String    @unique(map: "code") @db.VarChar(4)
  expired_at DateTime  @db.Date
  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)
}

model tables {
  id         Int            @id @default(autoincrement())
  table_name String         @unique(map: "table_name") @db.VarChar(50)
  status     tables_status? @default(AVAILABLE)
  created_at DateTime?      @default(now()) @db.DateTime(0)
  updated_at DateTime?      @default(now()) @db.DateTime(0)
  orders     orders[]
}

model users {
  id         Int       @id @default(autoincrement())
  username   String    @unique(map: "username") @db.VarChar(50)
  password   String    @db.VarChar(255)
  role_id    Int
  created_at DateTime? @default(now()) @db.DateTime(0)
  updated_at DateTime? @default(now()) @db.DateTime(0)
  roles      roles     @relation(fields: [role_id], references: [id], onUpdate: NoAction, map: "users_ibfk_1")

  @@index([role_id], map: "role_id")
}

enum tables_status {
  AVAILABLE
  OCCUPIED
}

enum orders_status {
  PENDING
  SUBMITTED
  COMPLETED
  PAID
}

enum order_details_status {
  PREPARING
  COMPLETED
}
